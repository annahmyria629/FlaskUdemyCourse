2 typed of DBs - SQL, NoSQL

1. MongoDB
    Concept of collection & document. DB - physical container of collections.
    Collection - group of MongoDB documents = table in RDMS. May have no schema. Documents in
    one collection can contain different fields.
    Document - set of key-value pairs. Similar to json. Have dynamic schema - documents in the same
    collection dont need to have the same field & common fields may contain different data types.

    RDMS            MongoDB
    Table           Collection
    Row             Document
    Column          Field
    Table Join      Embedded Documents
    Primary Key     Default _id is given by Mongo

    Example of Document:
    {
        _id: <ObjectId1>,
        username: "Username",
        contact: {
                    phone: "phone",
                    email: "email"
                 } //this is embedded sub-document
    }

    _id - 12 bytes, hexadecimal(16). 4 bytes - timestamp, 3 - machine id, 2 - process id on Mongo server,
    3 - incremental value

    Advantages:
    - Schema less (different documents with different fields, types and size)
    - No complex joins
    - Query ability
    - Easy to scale

2. Create, delete DBs and collections

    use <DB_Name> - Mongo will create and use db with such name
    db - check current selected db
    show dbs - list of all dbs
    test is a default db
    db.dropDatabase() - delete selected db
    show collections - list of all collections in selected db
    db.colName.insert({"field": "value"}) - add document {"field": "value"} to collection with name colName
    db.colName.insert([doc1, doc2, ...]) - insert multiple docs to collection with name colName
    db.createCollection(name, options) - create collection, options is a document with collection configurations
    Collection options:
    1) Capped (override old docs when fixed size is reached, size must be specified) True/False
    2) autoIndexId (automatic creates _id field) True/False(default)
    3) Size (max size in bytes)
    4) Max (max num of docs in capped collection)
        ...
    db.createCollection(col_name, {capped: true, autoIndexId: true, size: 40000, max: 100})
    db.colName.insert({"field": "value"}) - collection colName without any options will be created
                                                                                automatically

    db.colName.drop() - delete collection with name colName - returns true if ok

3. Data types in Mongo
    1) String (utf-8)
    2) Integer (32/64 bits depends on server)
    3) Boolean
    4) Double
    5) Min/Max keys (compare value with lowest and highest BSON element. Both are internal data types)
    6) Array ({"array": ["v1", "v2"]})
    7) Timestamp
    8) Object (embedded docs)
    9) Null, Undefined
    10) Symbol (like char for specific language symbols)
    11) Date (64-bit integer which represents the number of milliseconds. BSON data type generally supports
                UTC datetime and it is signed. If the value of the date data type is negative then
                it represents the dates before 1970. There are various methods to return date,
                it can be returned either as a string or as a date object. Some method for the date:

                Date(): It returns the current date in string format.
                new Date(): Returns a date object. Uses the ISODate() wrapper.
                new ISODate(): It also returns a date object. Uses the ISODate() wrapper.)
    12) Object ID (_id)
    13) Regular expression
    14) JS code
    15) Binary data

4. Query documents
    For querying documents use
    db.colName.find(condition).pretty() (pretty for formatted output)
    db.colName.findOne().pretty() will return one document

    db.colName.find({}).pretty() - find all docs in collection

    Filters:
    1) =    : {"key": "value"}
    2) <    : {"key": {$lt: "value"}}
    3) <=   : {"key": {$lte: "value"}}
    4) >    : {"key": {$gt: "value"}}
    5) >=   : {"key": {$gte: "value"}}
    6) !=   : {"key": {$ne: "value"}}

    AND operator:
    $and: [condition1, condition2, ...]
    Example:
    db.colName.find({
        $and: [
            {"key": {$lt: "value"}}, {"key": "value"}, {"key": {$lte: "value"}}
        ]
    }).pretty()

    OR operator:
    $or: [condition1, condition2, ...]
    Example:
    db.colName.find({
        $or: [
            {"key": {$lt: "value"}}, {"key": "value"}, {"key": {$lte: "value"}}
        ]
    }).pretty()

5. Updating, Sorting, Limiting
    update - updated document`s value in corresponding fields
    save - replaces specific document with passed

    db.colName.update(selection_criteria, {$set:{updated_data}})

    Example:
    db.colName.update({"title":"title to update"}, {$set:{"title": "new title"}}, {multi: true})
    {multi: true} if its need to update few records

    remove(criteria, justOne) - delete docs
    justOne - flag

    Projection - selecting specified fields of the document.
    1 - output field, 0 - dont output field
    Example:
    db.colName.find({}, {"title": 1, _id: 0})

    Limiting of documents:
    db.colName.find({}).limit(number_of_records)

    Sorting of documents:
    1 - ascending
    -1 - descending

    db.colName.find({}).sort({field_name: sorting_order})

